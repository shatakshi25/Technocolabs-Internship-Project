# -*- coding: utf-8 -*-
"""parkinson disease project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13LPJ3wGToMXs3nkl935LfuqOM0QkQD97

# **Parkinson's Disease Detection**

Importing the required libraries
"""

#import libraries
import numpy as np
import pandas as pd

"""Loading the data"""

#load the data
data = pd.read_csv("/content/drive/My Drive/parkinsons.data")
data

data.describe

data.info()

#converting the data into dataframe using pandas
df = pd.DataFrame(data)
df.head()

"""# **Getting the features and labels of the dataset**"""

x1 = df.drop(['status'],axis=1)
y1 = df[["status"]]

x1

y1

x = df.drop(['status'],axis=1).values[:,1:]
y = df[["status"]].values

x

x[0]

y

y1['status'].value_counts()

"""# **Visualization of data**"""

#heatmap
import matplotlib.pyplot as plt
import seaborn as sns
relation = data.corr()
fig, ax = plt.subplots(figsize=(25,25))
sns.heatmap(relation, annot=True, cmap='summer') 
plt.show()

#pie chart
labels = 'Parkison disease', 'Healthy'
sizes = [147, 48]
colors = ['gold', 'yellowgreen']
explode = (0.1, 0)  # explode 1st slice

# Plot
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)

plt.axis('equal')
plt.show()

#bar chart
import seaborn as sns
sns.countplot(df['status'].values)
plt.xlabel('status')
plt.ylabel('status')
plt.show()

#scatter chart
index_class=[]
for i in range(24):
    index_class.append(i)
plt.scatter(x=index_class,y=df[df['status']==1].HNR[:24],color='b')
plt.scatter(x=index_class,y=df[df['status']==0].HNR[:24],color='r')
plt.show()

"""# **Scaling the features (x) between 0 to 1**"""

#scaling
from sklearn.preprocessing import MinMaxScaler
scale = MinMaxScaler((0,1))
x2 = scale.fit_transform(x)
y2 = y

df.columns

"""## **Splitting the training and testing data**"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.2, random_state=7)

"""# **Training the data using XGBoost Classifier**"""

from xgboost import XGBClassifier
model=XGBClassifier()
model.fit(x_train,y_train)

x_test

"""# **Predicting the accuracy**"""

from sklearn.metrics import accuracy_score
y_pred=model.predict(x_test)
print(accuracy_score(y_test, y_pred))

y_pred

"""# **Result**"""

model.predict([209.516, 253.017, 89.488, 0.00564, 2.9999999999999997e-05,
        0.00331, 0.00292, 0.009940000000000001, 0.027510000000000003,
        0.263, 0.016040000000000002, 0.016569999999999998, 0.01879,
        0.048119999999999996, 0.0181, 19.147, 0.431674, 0.683244,
        -6.195325, 0.129303, 2.784312, 0.16889500000000002])

model.predict([228.969, 239.541, 113.201, 0.00238, 1e-05, 0.0013599999999999999,
        0.0014, 0.004079999999999999, 0.01745, 0.154, 0.00942, 0.0116,
        0.01234, 0.02827, 0.0042, 24.547, 0.305429, 0.681811,
        -7.314236999999999, 0.006274, 2.1185959999999997, 0.091546])

import pickle
pickle.dump(model,open('model.pkl','wb')) #write mode
model1=pickle.load(open('model.pkl','rb')) #read mode